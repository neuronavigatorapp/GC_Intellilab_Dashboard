import streamlit as st
import pandas as pd
import os
from datetime import datetime
from fpdf import FPDF

# Page configuration
st.set_page_config(page_title="Compliance Reporting", layout="wide")
st.title("ðŸ“‹ Automated Compliance Reporting & Documentation")

# Define data directories
DATA_DIRS = {
    "Instrument Profiles": "../data/instrument_profiles/instrument_profiles.csv",
    "Inventory": "../data/inventory/gc_inventory.csv",
    "QC & Calibration": "../data/qc_calibration/qc_calibration_records.csv",
    "Troubleshooting": "../data/troubleshooting/troubleshooting_records.csv",
    "Maintenance": "../data/maintenance/maintenance_records.csv"
}

# Sidebar: Generate PDF Compliance Report
st.sidebar.header("ðŸ“‘ Generate Compliance PDF Report")

report_title = st.sidebar.text_input("Report Title", "GC IntelliLab Compliance Report")
report_period_start = st.sidebar.date_input("Reporting Period Start", datetime.today())
report_period_end = st.sidebar.date_input("Reporting Period End", datetime.today())
generated_by = st.sidebar.text_input("Generated by", "QC Lab Manager")

generate_report = st.sidebar.button("Generate PDF Report")

if generate_report:
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, report_title, ln=True, align="C")
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Reporting Period: {report_period_start} to {report_period_end}", ln=True)
    pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)
    pdf.cell(0, 10, f"Prepared by: {generated_by}", ln=True)
    pdf.ln(10)

    for section, path in DATA_DIRS.items():
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, f"{section}:", ln=True)
        pdf.set_font("Arial", size=10)

        if os.path.exists(path):
            df = pd.read_csv(path)
            if not df.empty:
                pdf.cell(0, 8, f"Total records: {len(df)}", ln=True)
                pdf.ln(3)
                cols = df.columns.tolist()
                pdf.set_font("Arial", 'B', 10)
                pdf.cell(0, 6, ', '.join(cols), ln=True)
                pdf.set_font("Arial", size=9)

                # Add up to 5 recent records for brevity
                recent_records = df.tail(5).values.tolist()
                for record in recent_records:
                    record_str = ', '.join([str(item) for item in record])
                    pdf.multi_cell(0, 5, record_str)
                pdf.ln(5)
            else:
                pdf.cell(0, 8, "No records found.", ln=True)
                pdf.ln(5)
        else:
            pdf.cell(0, 8, "Data file not found.", ln=True)
            pdf.ln(5)

    # Save PDF
    REPORT_DIR = "../data/reports"
    os.makedirs(REPORT_DIR, exist_ok=True)
    report_filename = f"{REPORT_DIR}/Compliance_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(report_filename)

    st.sidebar.success("Compliance PDF Report generated successfully!")
    with open(report_filename, "rb") as pdf_file:
        st.sidebar.download_button("ðŸ“¥ Download Report", pdf_file, file_name=os.path.basename(report_filename))

# Main Page: Historical Reports
st.subheader("ðŸ“š Historical Compliance Reports")

REPORT_DIR = "../data/reports"
if not os.path.exists(REPORT_DIR):
    os.makedirs(REPORT_DIR)

report_files = [f for f in os.listdir(REPORT_DIR) if f.endswith('.pdf')]
report_files.sort(reverse=True)

if report_files:
    for file in report_files:
        file_path = os.path.join(REPORT_DIR, file)
        col1, col2 = st.columns([0.8, 0.2])
        col1.markdown(f"**{file}**")
        with open(file_path, "rb") as pdf_file:
            col2.download_button("ðŸ“¥ Download", pdf_file, file_name=file, key=file)
else:
    st.info("No compliance reports generated yet. Use the sidebar to create a new report.")
